// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: oneof.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _oneof_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *Event_EventA:

		if v, ok := interface{}(m.GetEventA()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EventA",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_EventB:

		if v, ok := interface{}(m.GetEventB()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EventB",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_EventC:

		if v, ok := interface{}(m.GetEventC()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EventC",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return EventValidationError{
			field:  "Event",
			reason: "value is required",
		}

	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on EventA with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EventA) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for A

	return nil
}

// EventAValidationError is the validation error returned by EventA.Validate if
// the designated constraints aren't met.
type EventAValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventAValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventAValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventAValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventAValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventAValidationError) ErrorName() string { return "EventAValidationError" }

// Error satisfies the builtin error interface
func (e EventAValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventA.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventAValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventAValidationError{}

// Validate checks the field values on EventB with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EventB) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for A

	// no validation rules for B

	return nil
}

// EventBValidationError is the validation error returned by EventB.Validate if
// the designated constraints aren't met.
type EventBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventBValidationError) ErrorName() string { return "EventBValidationError" }

// Error satisfies the builtin error interface
func (e EventBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventBValidationError{}

// Validate checks the field values on EventC with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EventC) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for A

	// no validation rules for B

	if v, ok := interface{}(m.GetC()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventCValidationError{
				field:  "C",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventCValidationError is the validation error returned by EventC.Validate if
// the designated constraints aren't met.
type EventCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventCValidationError) ErrorName() string { return "EventCValidationError" }

// Error satisfies the builtin error interface
func (e EventCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventCValidationError{}

// Validate checks the field values on EventC_Context with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventC_Context) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	return nil
}

// EventC_ContextValidationError is the validation error returned by
// EventC_Context.Validate if the designated constraints aren't met.
type EventC_ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventC_ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventC_ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventC_ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventC_ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventC_ContextValidationError) ErrorName() string { return "EventC_ContextValidationError" }

// Error satisfies the builtin error interface
func (e EventC_ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventC_Context.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventC_ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventC_ContextValidationError{}
